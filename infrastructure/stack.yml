Resources:
  EmailHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: handler.handler
      Role: !GetAtt EmailHandlerRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            return None
      Runtime: python3.6
      Environment:
        Variables:
          EMAIL_BUCKET: !Ref EmailBucket
          DATA_BUCKET: !Ref DataBucket
  EmailHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Join
                  - '/'
                  - - !GetAtt EmailBucket.Arn
                    - '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Join
                  - '/'
                  - - !GetAtt DataBucket.Arn
                    - '*'
  EmailHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EmailHandlerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: ses.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
  EmailBucket:
    Type: AWS::S3::Bucket
  EmailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Resource: !Join
              - '/'
              - - !GetAtt EmailBucket.Arn
                - '*'
            Condition:
              StringEquals:
                aws:Referer: !Ref AWS::AccountId
  DataBucket:
    Type: AWS::S3::Bucket
  DataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt DataCloudFrontDistributionS3AccessIdentity.S3CanonicalUserId
            Resource: !Join
              - '/'
              - - !GetAtt DataBucket.Arn
                - '*'
  DataCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: DataBucketOrigin
          ViewerProtocolPolicy: 'redirect-to-https'
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt DataBucket.DomainName
            Id: DataBucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref DataCloudFrontDistributionS3AccessIdentity
        PriceClass: PriceClass_100
  DataCloudFrontDistributionS3AccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for Oyster History data bucket
Outputs:
  EmailHandlerFunctionName:
    Value: !Ref EmailHandlerFunction
